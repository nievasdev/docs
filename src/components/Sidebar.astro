---
import { readMenusRecursively, type MenuCategory } from '../utils/menuLoader';

const menus = await readMenusRecursively();
const currentPath = Astro.url.pathname;

function formatFolderName(s: string): string {
  return s.replace(/[-_]/g, ' ').split(' ').map(w => w.charAt(0).toUpperCase() + w.slice(1).toLowerCase()).join(' ');
}

function generateMenuId(m: MenuCategory, p: string = ''): string {
  return p ? `${p}-${m.name}` : m.name;
}

function menuContainsCurrentPath(m: MenuCategory, p: string): boolean {
  if (m.indexContent && (p === `/${m.slug}` || p === `/${m.slug}/`)) return true;
  for (const i of m.items) {
    if (p === `/${i.slug}` || p === `/${i.slug}/`) return true;
  }
  if (m.children) {
    for (const c of m.children) {
      if (menuContainsCurrentPath(c, p)) return true;
    }
  }
  return false;
}
---

<aside class="sidebar">
  <div class="sidebar-header">
    <h1><a href="/" onclick="playTerminalSound()">ðŸ“š DOCS</a></h1>
    <div class="font-controls">
      <button id="font-decrease" class="font-btn" title="Disminuir tamaÃ±o de fuente">-</button>
      <button id="font-increase" class="font-btn" title="Aumentar tamaÃ±o de fuente">+</button>
    </div>
  </div>

  {menus.map((menu) => {
    const isMenuActive = menuContainsCurrentPath(menu, currentPath);
    return (
      <div class="menu-section">
        {menu.children || menu.items.length > 0 ? (
          <>
            {menu.indexContent ? (
              <a href={`/${menu.slug}`} class:list={['menu-title', 'category-title', { active: isMenuActive }]} onclick="playTerminalSound()">{menu.title}</a>
            ) : (
              <div class:list={['menu-title', 'category-title', { active: isMenuActive }]} data-menu={generateMenuId(menu)}>{menu.title}</div>
            )}
            <div class:list={['submenu', 'category-submenu', { open: isMenuActive }]} id={`submenu-${generateMenuId(menu)}`}>
              <div class="submenu-content">
                {menu.children?.map((child) => {
                  const isChildActive = menuContainsCurrentPath(child, currentPath);
                  return (
                    <div class="menu-subcategory">
                      {child.indexContent ? (
                        <a href={`/${child.slug}`} class:list={['menu-subtitle', { active: isChildActive }]} onclick="playTerminalSound()">{child.title}</a>
                      ) : (
                        <div class:list={['menu-subtitle', { active: isChildActive }]} data-menu={generateMenuId(child, menu.name)}>{child.title}</div>
                      )}
                      <div class:list={['submenu', { open: isChildActive }]} id={`submenu-${generateMenuId(child, menu.name)}`}>
                        <div class="submenu-content">
                          {child.children?.map((subchild) => {
                            const isSubchildActive = menuContainsCurrentPath(subchild, currentPath);
                            return (
                              <div class="menu-subsubcategory">
                                {subchild.indexContent ? (
                                  <a href={`/${subchild.slug}`} class:list={['menu-subsubtitle', { active: isSubchildActive }]} onclick="playTerminalSound()">{subchild.title}</a>
                                ) : (
                                  <div class:list={['menu-subsubtitle', { active: isSubchildActive }]} data-menu={generateMenuId(subchild, `${menu.name}-${child.name}`)}>{subchild.title}</div>
                                )}
                                <div class:list={['submenu', { open: isSubchildActive }]} id={`submenu-${generateMenuId(subchild, `${menu.name}-${child.name}`)}`}>
                                  <ul class="submenu-content">
                                    {subchild.items.map((item) => (
                                      <li>
                                        <a href={`/${item.slug}`} class={currentPath === `/${item.slug}` || currentPath === `/${item.slug}/` ? 'active' : ''} onclick="playTerminalSound()">{item.title}</a>
                                      </li>
                                    ))}
                                  </ul>
                                </div>
                              </div>
                            )
                          })}
                          {child.items.length > 0 && (
                            <ul class="submenu-content">
                              {child.items.map((item) => (
                                <li>
                                  <a href={`/${item.slug}`} class={currentPath === `/${item.slug}` || currentPath === `/${item.slug}/` ? 'active' : ''} onclick="playTerminalSound()">{item.title}</a>
                                </li>
                              ))}
                            </ul>
                          )}
                        </div>
                      </div>
                    </div>
                  )
                })}
                {menu.items.length > 0 && (
                  <ul class="submenu-content">
                    {menu.items.map((item) => (
                      <li>
                        <a href={`/${item.slug}`} class={currentPath === `/${item.slug}` || currentPath === `/${item.slug}/` ? 'active' : ''} onclick="playTerminalSound()">{item.title}</a>
                      </li>
                    ))}
                  </ul>
                )}
              </div>
            </div>
          </>
        ) : null}
      </div>
    )
  })}
</aside>

<script>
  const t = document.querySelectorAll('.menu-title:not(a)');
  const s = document.querySelectorAll('.menu-subtitle:not(a)');
  const u = document.querySelectorAll('.menu-subsubtitle:not(a)');

  function h(e) {
    const n = e.getAttribute('data-menu');
    const m = document.getElementById(`submenu-${n}`);
    if (m) {
      if (typeof window.playTerminalSound === 'function') {
        window.playTerminalSound();
      }
      m.classList.toggle('open');
      e.classList.toggle('active');
    }
  }

  t.forEach(e => e.addEventListener('click', () => h(e)));
  s.forEach(e => e.addEventListener('click', () => h(e)));
  u.forEach(e => e.addEventListener('click', () => h(e)));

  const f = [12, 14, 16, 18, 20, 22];
  let c = parseInt(localStorage.getItem('fontSize') || '1');

  function a(i) {
    document.documentElement.style.fontSize = `${f[i]}px`;
    localStorage.setItem('fontSize', i.toString());
  }

  a(c);

  const d = document.getElementById('font-increase');
  d && d.addEventListener('click', () => {
    if (c < f.length - 1) {
      c++;
      a(c);
      if (typeof window.playTerminalSound === 'function') {
        window.playTerminalSound();
      }
    }
  });

  const r = document.getElementById('font-decrease');
  r && r.addEventListener('click', () => {
    if (c > 0) {
      c--;
      a(c);
      if (typeof window.playTerminalSound === 'function') {
        window.playTerminalSound();
      }
    }
  });
</script>

<style>
  .sidebar-header h1 a { color: inherit; text-decoration: none; transition: color .2s; }
  .sidebar-header h1 a:hover { color: var(--accent); }
  .menu-title a, .menu-subtitle a, .menu-subsubtitle a { color: inherit; text-decoration: none; }
  .menu-subtitle { padding: .5rem 1rem; cursor: pointer; font-size: .9rem; color: var(--gray); border-left: 2px solid transparent; transition: all .2s; margin-left: .5rem; }
  .menu-subtitle:hover, .menu-subtitle.active { color: var(--accent); border-left-color: var(--accent); }
  .menu-subcategory { margin-bottom: .5rem; }
  .menu-subsubtitle { padding: .4rem .8rem; cursor: pointer; font-size: .85rem; color: var(--gray); border-left: 2px solid transparent; transition: all .2s; margin-left: 1rem; }
  .menu-subsubtitle:hover, .menu-subsubtitle.active { color: var(--accent); border-left-color: var(--accent); }
  .menu-subsubcategory { margin-bottom: .5rem; margin-left: .5rem; }
  .category-title { font-weight: bold; font-size: 1rem; }
  .category-submenu { padding-left: .5rem; }
  .sidebar-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 1rem; }
  .font-controls { display: flex; gap: .25rem; }
  .font-btn { background: transparent; border: 1px solid var(--gray); color: var(--gray); width: 2rem; height: 2rem; border-radius: 4px; cursor: pointer; font-size: 1.286rem; font-weight: bold; display: flex; align-items: center; justify-content: center; transition: all .2s; padding: 0; }
  .font-btn:hover { border-color: var(--accent); color: var(--accent); background: rgba(8, 203, 0, .1); }
  .font-btn:active { transform: scale(.95); }
</style>
