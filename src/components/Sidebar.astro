---
import { readMenusRecursively, type MenuStructure } from '../utils/menuLoader';

const menus = await readMenusRecursively();
const currentPath = Astro.url.pathname;

// Funci칩n para formatear nombres de carpetas
// Convierte "logica_y_matematica" o "logica-matematica" a "Logica Y Matematica"
function formatFolderName(str: string): string {
  return str
    .replace(/[-_]/g, ' ')  // Reemplaza guiones y guiones bajos por espacios
    .split(' ')
    .map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase())
    .join(' ');
}

// Funci칩n para generar un ID 칰nico para cada men칰/carpeta
function generateMenuId(menu: MenuStructure, parentPath: string = ''): string {
  return parentPath ? `${parentPath}-${menu.name}` : menu.name;
}

// Funci칩n para verificar si un men칰 contiene el path actual (recursivamente)
function menuContainsCurrentPath(menu: MenuStructure, path: string): boolean {
  // Si tiene datos (es un JSON), verificar sus items
  if (menu.data) {
    for (const section of menu.data.sections) {
      for (const item of section.items) {
        if (path === `/${item.slug}` || path === `/${item.slug}/`) {
          return true;
        }
      }
    }
  }

  // Si tiene hijos, verificar recursivamente
  if (menu.children) {
    for (const child of menu.children) {
      if (menuContainsCurrentPath(child, path)) {
        return true;
      }
    }
  }

  return false;
}
---

<aside class="sidebar">
  <h1>游닄 DOCS</h1>

  {menus.map((menu) => {
    const isMenuActive = menuContainsCurrentPath(menu, currentPath);
    return (
      <div class="menu-section">
        {menu.children ? (
          /* Es una carpeta con subcategor칤as */
          <>
            <div
              class:list={['menu-title', 'category-title', { active: isMenuActive }]}
              data-menu={generateMenuId(menu)}
            >
              {formatFolderName(menu.name)}
            </div>
            <div
              class:list={['submenu', 'category-submenu', { open: isMenuActive }]}
              id={`submenu-${generateMenuId(menu)}`}
            >
              <div class="submenu-content">
                {menu.children.map((child) => {
                  const isChildActive = menuContainsCurrentPath(child, currentPath);

                  if (child.children) {
                    /* Es una subcarpeta con m치s contenido */
                    return (
                      <div class="menu-subcategory">
                        <div
                          class:list={['menu-subtitle', { active: isChildActive }]}
                          data-menu={generateMenuId(child, menu.name)}
                        >
                          {formatFolderName(child.name)}
                        </div>
                        <div
                          class:list={['submenu', { open: isChildActive }]}
                          id={`submenu-${generateMenuId(child, menu.name)}`}
                        >
                          <div class="submenu-content">
                            {child.children.map((subchild) => {
                              const isSubchildActive = menuContainsCurrentPath(subchild, currentPath);
                              return subchild.data ? (
                                <div class="menu-subsubcategory">
                                  <div
                                    class:list={['menu-subsubtitle', { active: isSubchildActive }]}
                                    data-menu={generateMenuId(subchild, `${menu.name}-${child.name}`)}
                                  >
                                    {subchild.data.title}
                                  </div>
                                  <div
                                    class:list={['submenu', { open: isSubchildActive }]}
                                    id={`submenu-${generateMenuId(subchild, `${menu.name}-${child.name}`)}`}
                                  >
                                    <ul class="submenu-content">
                                      {subchild.data.sections.map((section) => (
                                        <li>
                                          <strong style="color: #fff; font-size: 10px; display: block; margin: 0.5rem 0 0.25rem 0; text-transform: uppercase;">
                                            {section.title}
                                          </strong>
                                          <ul style="list-style: none; margin-left: 0.5rem;">
                                            {section.items.map((item) => (
                                              <li style="margin-bottom: 0.25rem;">
                                                <a
                                                  href={`/${item.slug}`}
                                                  class={currentPath === `/${item.slug}` || currentPath === `/${item.slug}/` ? 'active' : ''}
                                                  onclick="playTerminalSound()"
                                                >
                                                  {item.title}
                                                </a>
                                              </li>
                                            ))}
                                          </ul>
                                        </li>
                                      ))}
                                    </ul>
                                  </div>
                                </div>
                              ) : null
                            })}
                          </div>
                        </div>
                      </div>
                    );
                  } else if (child.data) {
                    /* Es un archivo JSON directo */
                    return (
                      <div class="menu-subcategory">
                        <div
                          class:list={['menu-subtitle', { active: isChildActive }]}
                          data-menu={generateMenuId(child, menu.name)}
                        >
                          {child.data.title}
                        </div>
                        <div
                          class:list={['submenu', { open: isChildActive }]}
                          id={`submenu-${generateMenuId(child, menu.name)}`}
                        >
                          <ul class="submenu-content">
                            {child.data.sections.map((section) => (
                              <li>
                                <strong style="color: #fff; font-size: 10px; display: block; margin: 0.5rem 0 0.25rem 0; text-transform: uppercase;">
                                  {section.title}
                                </strong>
                                <ul style="list-style: none; margin-left: 0.5rem;">
                                  {section.items.map((item) => (
                                    <li style="margin-bottom: 0.25rem;">
                                      <a
                                        href={`/${item.slug}`}
                                        class={currentPath === `/${item.slug}` || currentPath === `/${item.slug}/` ? 'active' : ''}
                                        onclick="playTerminalSound()"
                                      >
                                        {item.title}
                                      </a>
                                    </li>
                                  ))}
                                </ul>
                              </li>
                            ))}
                          </ul>
                        </div>
                      </div>
                    );
                  }
                  return null;
                })}
              </div>
            </div>
          </>
        ) : menu.data ? (
          /* Es un archivo JSON sin carpeta padre */
          <>
            <div
              class:list={['menu-title', { active: isMenuActive }]}
              data-menu={generateMenuId(menu)}
            >
              {menu.data.title}
            </div>
            <div
              class:list={['submenu', { open: isMenuActive }]}
              id={`submenu-${generateMenuId(menu)}`}
            >
              <ul class="submenu-content">
                {menu.data.sections.map((section) => (
                  <li>
                    <strong style="color: #fff; font-size: 10px; display: block; margin: 0.5rem 0 0.25rem 0; text-transform: uppercase;">
                      {section.title}
                    </strong>
                    <ul style="list-style: none; margin-left: 0.5rem;">
                      {section.items.map((item) => (
                        <li style="margin-bottom: 0.25rem;">
                          <a
                            href={`/${item.slug}`}
                            class={currentPath === `/${item.slug}` || currentPath === `/${item.slug}/` ? 'active' : ''}
                            onclick="playTerminalSound()"
                          >
                            {item.title}
                          </a>
                        </li>
                      ))}
                    </ul>
                  </li>
                ))}
              </ul>
            </div>
          </>
        ) : null}
      </div>
    )
  })}
</aside>

<script>
  // Toggle de submen칰s (solo maneja interacci칩n del usuario)
  const menuTitles = document.querySelectorAll('.menu-title');
  const menuSubtitles = document.querySelectorAll('.menu-subtitle');
  const menuSubsubtitles = document.querySelectorAll('.menu-subsubtitle');

  // Manejar categor칤as principales
  menuTitles.forEach((title) => {
    title.addEventListener('click', () => {
      const menuName = title.getAttribute('data-menu');
      const submenu = document.getElementById(`submenu-${menuName}`);

      if (submenu) {
        if (typeof window.playTerminalSound === 'function') {
          window.playTerminalSound();
        }
        submenu.classList.toggle('open');
        title.classList.toggle('active');
      }
    });
  });

  // Manejar subcategor칤as
  menuSubtitles.forEach((subtitle) => {
    subtitle.addEventListener('click', () => {
      const menuName = subtitle.getAttribute('data-menu');
      const submenu = document.getElementById(`submenu-${menuName}`);

      if (submenu) {
        if (typeof window.playTerminalSound === 'function') {
          window.playTerminalSound();
        }
        submenu.classList.toggle('open');
        subtitle.classList.toggle('active');
      }
    });
  });

  // Manejar sub-subcategor칤as (nivel 3)
  menuSubsubtitles.forEach((subsubtitle) => {
    subsubtitle.addEventListener('click', () => {
      const menuName = subsubtitle.getAttribute('data-menu');
      const submenu = document.getElementById(`submenu-${menuName}`);

      if (submenu) {
        if (typeof window.playTerminalSound === 'function') {
          window.playTerminalSound();
        }
        submenu.classList.toggle('open');
        subsubtitle.classList.toggle('active');
      }
    });
  });
</script>

<style>
  .menu-subtitle {
    padding: 0.5rem 1rem;
    cursor: pointer;
    font-size: 0.9rem;
    color: var(--gray);
    border-left: 2px solid transparent;
    transition: all 0.2s;
    margin-left: 0.5rem;
  }

  .menu-subtitle:hover {
    color: var(--accent);
    border-left-color: var(--accent);
  }

  .menu-subtitle.active {
    color: var(--accent);
    border-left-color: var(--accent);
  }

  .menu-subcategory {
    margin-bottom: 0.5rem;
  }

  .menu-subsubtitle {
    padding: 0.4rem 0.8rem;
    cursor: pointer;
    font-size: 0.85rem;
    color: var(--gray);
    border-left: 2px solid transparent;
    transition: all 0.2s;
    margin-left: 1rem;
  }

  .menu-subsubtitle:hover {
    color: var(--accent);
    border-left-color: var(--accent);
  }

  .menu-subsubtitle.active {
    color: var(--accent);
    border-left-color: var(--accent);
  }

  .menu-subsubcategory {
    margin-bottom: 0.5rem;
    margin-left: 0.5rem;
  }

  .category-title {
    font-weight: bold;
    font-size: 1rem;
  }

  .category-submenu {
    padding-left: 0.5rem;
  }
</style>
